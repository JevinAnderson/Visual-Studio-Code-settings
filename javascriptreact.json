{
  "Localize": {
		"prefix": "localize",
		"body": [
			"{localizer.get('${1:Message}')}$2"
		],
		"description": "Localize variables"
	},
  "Classic Component": {
    "prefix": "React Component extends React.Component",
    "body": [
      "import React, { Component, PropTypes } from 'react';",
      "",
      "class ${1:Name of Component} extends Component{",
      "  constructor(props){",
      "    super(props);",
      "    this.state = {};",
      "  }",
      "// componentWillMount = () => {},",
      "// componentDidMount = () => {},",
      "// componentWillReceiveProps = (nextProps) => {},",
      "// shouldComponentUpdate = (nextProps, nextState) => true,",
      "// componentWillUpdate = (nextProps, nextState) => {},",
      "// componentDidUpdate = (prevProps, prevState) => {},",
      "// componentWillUnmount = ()=>{},",
      "  render = () => {",
      "    return (",
      "      <div>",
      "      </div>",
      "    );",
      "  }",
      "};",
      "",
      "${1:Name of Component}.propTypes = {};",
      "",
      "${1:Name of Component}.defaultProps = {};",
      "",
      "export default ${1:Name of Component};$2"
    ],
    "description": "Classic react component created with the react create class method."
  },
  "Classic Component From Create Class": {
    "prefix": "React Component React.CreateClass",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:Name of Component} = React.createClass({",
      "  propTypes: {",
      "  },",
      "// displayName: \"\",",
      "// mixins: [],",
      "// statics: {},",
      "// getInitialState: () => Object.assign({}),",
      "// getDefaultProps: () => Object.assign({}),",
      "// componentWillMount: () => {},",
      "// componentDidMount: () => {},",
      "// componentWillReceiveProps: (nextProps) => {},",
      "// shouldComponentUpdate: (nextProps, nextState) => true,",
      "// componentWillUpdate: (nextProps, nextState) => {},",
      "// componentDidUpdate: (prevProps, prevState) => {},",
      "// componentWillUnmount: ()=>{},",
      "  render: function() {",
      "    return (",
      "      <div>",
      "      </div>",
      "    );",
      "  }",
      "});",
      "",
      "export default ${1:Name of Component};$2"
    ],
    "description": "Classic react component created with the react create class method."
  },
  "Welp Component": {
    "prefix": "welp component",
    "body": [
      "import React from 'react';",
      "import { WelpComponent } from 'welp';",
      "import Store from './Store';",
      "class ${name} extends WelpComponent {",
      "  constructor(props) {",
      "    super(props, [Store]);",
      "  }",
      "  render() {",
      "    return (",
      "      <div>Hello ${name}</div>",
      "    );",
      "  }",
      "}",
      "export default ${name};",
      ""
    ],
    "description": "Welp component template"
  },
  "Welp Store": {
    "prefix": "welp store",
    "body": [
      "import { WelpStore } from 'welp';",
      "const Store = new WelpStore(",
      "  {},",
      "  action => {",
      "    switch (action.type) {",
      "    }",
      "  }",
      ");",
      "export default Store;",
      ""
    ],
    "description": "Welp store template"
  },
  "Action Template": {
    "prefix": "action template",
    "body": [
      "import LCARS from 'lcars';",
      "export const ${1} = '${1}';",
      "export function ${2}(value) {",
      "  LCARS.dispatch({",
      "    type: ${1},",
      "    data: value",
      "  });",
      "}",
      ""
    ],
    "description": "action template"
  },
  "Action Const": {
    "prefix": "action const",
    "body": [
      "export const ${name} = '${name}';"
    ],
    "description": "action const"
  }
}